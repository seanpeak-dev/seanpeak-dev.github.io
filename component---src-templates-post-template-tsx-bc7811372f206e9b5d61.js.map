{"version":3,"file":"component---src-templates-post-template-tsx-bc7811372f206e9b5d61.js","mappings":"wOAUA,IAAMA,GAAe,8OAefC,GAAK,kGAILC,GAAQ,wfA0Dd,EAvBuD,YAInD,IAHFC,EAGC,EAHDA,MACAC,EAEC,EAFDA,KACAC,EACC,EADDA,WAEA,OACE,QAACL,EAAD,MACE,mBACE,QAAC,EAAAM,KAAD,CAAMC,GAAG,KAAT,cAEF,QAACN,EAAD,KAAQE,IACR,QAACD,EAAD,MACE,iBAAIE,IACJ,mBACGC,EAAWG,KAAI,SAAAC,GAAC,OACf,oBAAOA,UCxEnB,IAAMC,GAAgB,o2BAuHtB,EAJyD,YAAqB,IAATC,EAAQ,EAARA,KACnE,OAAO,QAACD,EAAD,CAAkBE,wBAAyB,CAAEC,OAAQF,MCxH9D,IAaMG,GAAiB,wGAmCvB,EA7ByC,WACvC,IAAMC,GAAUC,EAAAA,EAAAA,aAyBhB,OAvBAC,EAAAA,EAAAA,YAAU,WACR,GAAwB,OAApBF,EAAQG,QAAZ,CAEA,IAAMC,EAAgCC,SAASC,cAAc,UAEvDC,EAAuC,CAC3CC,IA5BM,gCA6BNC,KA5BO,sCA6BP,aACE,WACFC,MAAO,UACPC,MAAM,eACNC,YAAa,YACbC,MAAO,QAGTC,OAAOC,QAAQR,GAAYS,SAAQ,YAAmB,IAAjBC,EAAgB,KAAXC,EAAW,KACnDd,EAAWe,aAAaF,EAAKC,MAG/BlB,EAAQG,QAAQiB,YAAYhB,MAC3B,KAEI,QAACL,EAAD,CAAmBsB,IAAKrB,KCPjC,EAtB2D,YAKvD,IAHqBsB,EAGtB,EAJDC,KACEC,kBAAqBF,MAEXG,EACX,EADDC,SAAYD,KAEZ,EAKIH,EAAM,GAJRK,KACE/B,EAFJ,EAEIA,KAFJ,IAGIgC,YAAexC,EAHnB,EAGmBA,MAAOyC,EAH1B,EAG0BA,QAASxC,EAHnC,EAGmCA,KAAMC,EAHzC,EAGyCA,WAIzC,OACE,QAACwC,EAAA,EAAD,CAAU1C,MAAOA,EAAO2C,YAAaF,EAASG,IAAKP,EAAMQ,MAAM,MAC7D,QAAC,EAAD,CAAU7C,MAAOA,EAAOC,KAAMA,EAAMC,WAAYA,KAChD,QAAC,EAAD,CAAaM,KAAMA,KACnB,QAAC,EAAD","sources":["webpack://gatsby-starter-default/./src/components/Post/PostHead.tsx","webpack://gatsby-starter-default/./src/components/Post/PostContent.tsx","webpack://gatsby-starter-default/./src/components/Post/CommentWidget.tsx","webpack://gatsby-starter-default/./src/templates/post_template.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { Link } from 'gatsby'\n\ntype PostHeadInfoProps = {\n  title: string\n  date: string\n  categories: string[]\n}\n\nconst PostHeadWrapper = styled.header`\n  & h3 {\n    font-family: 'Montserrat', sans-serif;\n    margin-top: 0px;\n    margin-bottom: 1.722rem;\n    font-size: 1.31951rem;\n    line-height: 1.1;\n\n    & a {\n      box-shadow: none;\n      text-decoration: none;\n      color: inherit;\n    }\n  }\n`\nconst Title = styled.h1`\n  margin-top: 1.722rem;\n  margin-bottom: 0px;\n`\nconst PostData = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  margin-right: 8px;\n  margin-bottom: 8px;\n\n  & p {\n    font-size: 0.87055rem;\n    line-height: 1.722rem;\n    display: block;\n    margin-bottom: 1.722rem;\n  }\n\n  & div {\n    display: flex;\n    margin-bottom: 50px;\n\n    & span {\n      margin: 2.5px 5px;\n      background: rgb(241, 243, 245);\n      border-radius: 1rem;\n      padding-left: 1rem;\n      padding-right: 1rem;\n      height: 2rem;\n      border-radius: 1rem;\n      display: inline-flex;\n      align-items: center;\n      font-size: 14px;\n      font-weight: 700;\n      color: #4665b7;\n    }\n  }\n`\n\nconst PostHead: FunctionComponent<PostHeadInfoProps> = function ({\n  title,\n  date,\n  categories,\n}) {\n  return (\n    <PostHeadWrapper>\n      <h3>\n        <Link to=\"/\">seanpeak</Link>\n      </h3>\n      <Title>{title}</Title>\n      <PostData>\n        <p>{date}</p>\n        <div>\n          {categories.map(v => (\n            <span>{v}</span>\n          ))}\n        </div>\n      </PostData>\n    </PostHeadWrapper>\n  )\n}\n\nexport default PostHead\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\n\ninterface PostContentProps {\n  html: string\n}\n\nconst MarkdownRenderer = styled.div`\n  // Markdown Style\n  line-height: 1.8;\n  font-size: 16px;\n  font-weight: 400;\n\n  // Apply Padding Attribute to All Elements\n  p {\n    padding: 3px 0;\n  }\n\n  // Adjust Heading Element Style\n  h1,\n  h2,\n  h3 {\n    font-weight: 700;\n    margin-bottom: 30px;\n  }\n\n  * + h1,\n  * + h2,\n  * + h3 {\n    margin-top: 40px;\n  }\n\n  hr + h1,\n  hr + h2,\n  hr + h3 {\n    margin-top: 0;\n  }\n\n  h1 {\n    font-size: 30px;\n  }\n\n  h2 {\n    font-size: 25px;\n  }\n\n  h3 {\n    font-size: 20px;\n  }\n\n  // Adjust Quotation Element Style\n  blockquote {\n    margin: 30px 0;\n    padding: 5px 15px;\n    border-left: 2px solid #000000;\n    font-weight: 700;\n  }\n\n  // Adjust List Element Style\n  ol,\n  ul {\n    margin-left: 20px;\n    padding: 5px 0;\n  }\n\n  // Adjust Horizontal Rule style\n  hr {\n    margin: 100px 0;\n  }\n\n  // Adjust Link Element Style\n  a {\n    color: #4665b7;\n    text-decoration: underline;\n  }\n\n  // Adjust Code Style\n  pre[class*='language-'] {\n    margin: 30px 0;\n    padding: 15px;\n    font-size: 15px;\n\n    ::-webkit-scrollbar-thumb {\n      background: rgba(255, 255, 255, 0.5);\n      border-radius: 3px;\n    }\n  }\n\n  code[class*='language-'],\n  pre[class*='language-'] {\n    tab-size: 2;\n  }\n\n  // Markdown Responsive Design\n  @media (max-width: 768px) {\n    width: 100%;\n    padding: 80px 20px;\n    line-height: 1.6;\n    font-size: 14px;\n\n    h1 {\n      font-size: 23px;\n    }\n\n    h2 {\n      font-size: 20px;\n    }\n\n    h3 {\n      font-size: 17px;\n    }\n\n    img {\n      width: 100%;\n    }\n\n    hr {\n      margin: 50px 0;\n    }\n  }\n`\n\nconst PostContent: FunctionComponent<PostContentProps> = function ({ html }) {\n  return <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />\n}\n\nexport default PostContent\n","import React, { createRef, FunctionComponent, useEffect } from 'react'\nimport styled from '@emotion/styled'\n\nconst src = 'https://utteranc.es/client.js'\nconst repo = 'seanpeak-dev/seanpeak-dev.github.io'\n\ntype UtterancesAttributesType = {\n  src: string\n  repo: string\n  'issue-term': string\n  label: string\n  theme: string\n  crossorigin: string\n  async: string\n}\n\nconst UtterancesWrapper = styled.div`\n  @media (max-width: 768px) {\n    padding: 0 20px;\n  }\n`\n\nconst CommentWidget: FunctionComponent = function () {\n  const element = createRef<HTMLDivElement>()\n\n  useEffect(() => {\n    if (element.current === null) return\n\n    const utterances: HTMLScriptElement = document.createElement('script')\n\n    const attributes: UtterancesAttributesType = {\n      src,\n      repo,\n      'issue-term':\n        'pathname' /* 포스트 경로 별로 Issue가 생성된다.(이외에도 총 6가지의 매핑 방식을 제공) */,\n      label: 'Comment',\n      theme: `github-light`,\n      crossorigin: 'anonymous',\n      async: 'true',\n    }\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value)\n    })\n\n    element.current.appendChild(utterances)\n  }, [])\n\n  return <UtterancesWrapper ref={element} />\n}\n\nexport default CommentWidget\n","import React, { FunctionComponent } from 'react'\nimport { graphql } from 'gatsby'\nimport Template from 'components/Common/Template'\nimport PostHead from 'components/Post/PostHead'\nimport { PostPageItemType } from 'types/PostItem.types'\nimport PostContent from 'components/Post/PostContent'\nimport CommentWidget from 'components/Post/CommentWidget'\n\ntype PostTemplateProps = {\n  data: {\n    allMarkdownRemark: {\n      edges: PostPageItemType[]\n    }\n  }\n  location: {\n    href: string\n  }\n}\n\nconst PostTemplate: FunctionComponent<PostTemplateProps> = function ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n  location: { href },\n}) {\n  const {\n    node: {\n      html,\n      frontmatter: { title, summary, date, categories },\n    },\n  } = edges[0]\n\n  return (\n    <Template title={title} description={summary} url={href} image=\"#\">\n      <PostHead title={title} date={date} categories={categories} />\n      <PostContent html={html} />\n      <CommentWidget />\n    </Template>\n  )\n}\n\nexport default PostTemplate\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          html\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["PostHeadWrapper","Title","PostData","title","date","categories","Link","to","map","v","MarkdownRenderer","html","dangerouslySetInnerHTML","__html","UtterancesWrapper","element","createRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","key","value","setAttribute","appendChild","ref","edges","data","allMarkdownRemark","href","location","node","frontmatter","summary","Template","description","url","image"],"sourceRoot":""}